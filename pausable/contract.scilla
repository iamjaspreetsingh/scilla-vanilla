(* This contract implements a Pausable token interface a la ERC20.*)
(* This contract does not fire events *)


(***************************************************)
(*               Associated library                *)
(***************************************************)
library Pausable

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end
    
(*constants*)
let _one=Int32 1
let _zero=Int32 0
(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Pausable
(owner : ByStr20,
 total_tokens : Uint128)

(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)



field bearer : Map String (Map ByStr20 Int32) = Emp String (Map ByStr20 Int32) 
  

(*add the account from role and make account as true(0)*)

transition add (role : String, account :ByStr20)
  b <- bearer;
  _role=builtin get b role;
  match _role with
  | Some v =>
    new_bearer = builtin put v account _one;
    new_bearer_role = builtin put b role new_bearer;
    bearer:=new_bearer_role;
    
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : _one };
    msgs = one_msg msg;
    send msgs
    
  | None =>
    new_bearer = let m = Emp ByStr20 Int32 in builtin put m account _one;
    new_bearer_role = builtin put b role new_bearer;
    bearer:=new_bearer_role;
    
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : _one };
    msgs = one_msg msg;
    send msgs
  end
end





(*renounces the account from role and make account as false(0)*)

transition renounce (role : String, account :ByStr20)
  b <- bearer;
  _role=builtin get b role;
  match _role with
  | Some v =>
    new_bearer = builtin put v account _zero;
    new_bearer_role = builtin put b role new_bearer;
    bearer:=new_bearer_role;
    
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : _zero };
    msgs = one_msg msg;
    send msgs
    
  | None =>
    new_bearer = let m = Emp ByStr20 Int32 in builtin put m account _zero;
    new_bearer_role = builtin put b role new_bearer;
    bearer:=new_bearer_role;
    
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : _zero };
    msgs = one_msg msg;
    send msgs
  end
end



(*removes the account from role*)

transition remove (role : String, account :ByStr20)
  b <- bearer;
  _role=builtin get b role;
  match _role with
  | Some v =>
    new_bearer = builtin remove v account ;
    new_bearer_role = builtin put b role new_bearer;
    bearer:=new_bearer_role;
    
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : _zero };
    msgs = one_msg msg;
    send msgs
    
  | None =>
    new_bearer = let m = Emp ByStr20 Int32 in builtin remove m account ;
    new_bearer_role = builtin put b role new_bearer;
    bearer:=new_bearer_role;
    
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : _zero };
    msgs = one_msg msg;
    send msgs
  end
end







(*checks the account for role*)

transition has (role : String, account :ByStr20)
  b <- bearer;
   t="true";
  f="false";
  _role=builtin get b role;
  match _role with
  | Some v =>
    new_bearer = builtin get v account ;
    match new_bearer with
          | Some v1 =>
            istrue = builtin eq v1 _one ;
            match istrue with
           | True =>
           msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; has : t };
           msgs = one_msg msg;
           send msgs
           | False =>
           msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; has : f };
           msgs = one_msg msg;
           send msgs
           end
    | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; has : f };
    msgs = one_msg msg;
    send msgs
    end
  | None =>
    
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; has : f };
    msgs = one_msg msg;
    send msgs
  end
end

